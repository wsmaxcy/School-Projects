080483b4 <swap1>:
 80483b4:    55                       push   %ebp			1
 80483b5:    89 e5                    mov    %esp,%ebp			2
 80483b7:    83 ec 10                 sub    $0x10,%esp			3
 80483ba:    8b 45 08                 mov    0x8(%ebp),%eax		4
 80483bd:    89 45 fc                 mov    %eax,-0x4(%ebp)		5
 80483c0:    8b 45 0c                 mov    0xc(%ebp),%eax		6
 80483c3:    89 45 08                 mov    %eax,0x8(%ebp)		7
 80483c6:    8b 45 fc                 mov    -0x4(%ebp),%eax		8
 80483c9:    89 45 0c                 mov    %eax,0xc(%ebp)		9
 80483cc:    c9                       leave  				10
 80483cd:    c3                       ret    				11

080483ce <swap2>:
 80483ce:    55                       push   %ebp			1
 80483cf:    89 e5                    mov    %esp,%ebp			2
 80483d1:    83 ec 10                 sub    $0x10,%esp			3
 80483d4:    8b 45 08                 mov    0x8(%ebp),%eax		4
 80483d7:    8b 00                    mov    (%eax),%eax		5
 80483d9:    89 45 fc                 mov    %eax,-0x4(%ebp)		6	
 80483dc:    8b 45 0c                 mov    0xc(%ebp),%eax		7
 80483df:    8b 10                    mov    (%eax),%edx		8	
 80483e1:    8b 45 08                 mov    0x8(%ebp),%eax		9
 80483e4:    89 10                    mov    %edx,(%eax)		10
 80483e6:    8b 45 0c                 mov    0xc(%ebp),%eax		11
 80483e9:    8b 55 fc                 mov    -0x4(%ebp),%edx		12
 80483ec:    89 10                    mov    %edx,(%eax)		13
 80483ee:    c9                       leave  				14
 80483ef:    c3                       ret    				15

080483f0 <main>:
 80483f0:    55                       push   %ebp			1
 80483f1:    89 e5                    mov    %esp,%ebp			2
 80483f3:    83 ec 08                 sub    $0x8,%esp			3
 80483f6:    c7 44 24 04 37 00 00     movl   $0x37,0x4(%esp)		4
 80483fd:    00 							5
 80483fe:    c7 04 24 19 00 00 00     movl   $0x19,(%esp)		6
 8048405:    e8 aa ff ff ff           call   80483b4 <swap1>		7
 804840a:    c9                       leave  				8
 804840b:    c3                       ret    				9
 804840c:    90                       nop				10
 804840d:    90                       nop				11
 804840e:    90                       nop				12
 804840f:    90                       nop				13



swap1
line1: points to ebp, which is the base area of the program stack.
line2: then moves the the objects that are in the regestry file %esp to regestry file %ebp, creating a save
of esp
line3: subtract 16 from the current memory position of %esp
line4: move the value set in ebp+* to eax
line5: move the value in eax to the memory position 4 less than ebp
line6: move the value at 12+ebp to eax
line7: move the value at eax to 8+ebp
line8: move the value located at ebp-4 to eax
line9: move the value located at eax to 12+ebp
line10: leave the stack options and return back to the top of the stack
line11: return to the first line of the next line at the bottom of the stack

swap2
line1: create base area of the program stack by pushing ebp to the top
line2: created allocated virtual memory space by moving the stack to include the memory area of esp to ebp
line3: subtract 16 from esp to create allocated memory in program stack
line4: move the value inside ebp+8 to eax
line5: the object that eax is pointing to is now placed inside of eax
line6: eax is now moved to ebp-4
line7: value inside 12+ebp is now moved inside eax
line8: the value that eax is pointing to is now placed inside edx
line9: the value inside 8+edp is placed inside eax
line10: edx is now moved to the position that eax is pointing to
line11: the value inside ebp+12 is now placed in edx
line12: the value inside ebp-4 is now placed inside edx
line13: edx is now placed to the memory position that eax points to
line14: leave the stack otions and return to ebp
line15: return to the first line of the next line at the bottom of the stack

main
line1: create base area of the program stack by pushing ebp to top
line2: move the objects that are in regestry file esp to ebp
line3: subtract the constant of 8 inside from esp
line4: but constant of 55 inside esp+4
line5: ----
line6: place the constant of 25 inside of the memory address that esp is pointing to
line7: call the method of swap1 
line8: once swap1 runs, return to this line and leave the current line to go on to the next memory allocated address
line9: 
line10: 
line11: 
line12: 
line13:

Even though I could not sucessfully run the code, I can tell my looking at the assembly language that there is a big
difference between them. The swap2 method relies more on pointer variables and memory addresses rather than actual
integers being passed into them. more allocated memory is needed in order to use the pass by pointer method due to the fact
that instead of loading actual values into the memory address, there are more values being pointed at in order to save the 
hassle of processing actaul values. This would be very benefitial for large files that would take a long time to process, 
but for this example it seems that the swap1 method would be the best coding decision due to speed and less coding. 